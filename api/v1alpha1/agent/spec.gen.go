// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9fXPbNtL4V8HwbiZJf5RkO2km1cxv7nEdp/U0jj1+uZu7Ks8FIlcSziTAAqActePv",
	"/gzeSJAEJcpxejfTm/5RhVgAi8Vi37AL/xYlLC8YBSpFNP0tEskKcqx/HhdFRhIsCaOndP1XzPXXgrMC",
	"uCSg/wV1A05TomBxdtkAkZsComkkJCd0GT3EUQoi4aRQsNE0OqVrwhnNgUq0xpzgeQboDjajNc5KQAUm",
	"XMSI0H9BIiFFaamGQbykkuQwRjcrDY0wTZHpAThZobwUEs0BzUHeA1B0qAGOvn2JkhXmOJHAxTiKHXJs",
	"roaPHh46X2KfDNcFJHqpWXaxiKY//xb9mcMimkZ/mtRUnFgSTgL0e4jbBKQ4B/X/JlHUqlQLYgskV4Bw",
	"PdSgpelPQmIu0T2RK4RRBlICR4wjWuZz4N7i3c4EFv9bxCgMWOpZjpfgrfeSszVJgUcPHx8+7qCpxLIU",
	"NxqiTQbTpoiAkSB0mTUpwagmTgprkoBaENAyj6Y/R5ccCqwXFasxuDQ/r0pKza9TzhmP4uiW3lF2T6M4",
	"OmF5kYGENPrYJkwcfR6pkUdrzNWmCDVFZwX+nJ1GD4lOW41Vp8mh2Wmo8e40eQtpElpcl3mO+WYgwbPM",
	"p7XoJ/aPgDO52kRx9BaWHKeQBgi8N1Gb2NZz9IJ4k/fCBOjZBKjQfVAcQY1A65KpakIJoxITKlAKEpNM",
	"oAXjiFFAWBSQSHd+k5JzJeCExNIeaiLQ8eUZugLBSm4o2pQMGRbyhmMq9Ew3pE9OKDikhKGZqUJNVn0h",
	"RQvOco2XMDssGcKUyZURBAvGcyyjaZRiCSM1Vlc6xFEOQuBlAIsfyxxTxAGnWnhbOERoqolMlxV18JyV",
	"0mJcoTcOTcbmAvga0h+AAsfhbVCrH+cgcYolHi8rSCRXWLaocY8FEiDRHAtIUVmYaauFEypfv6rxIFTC",
	"UomvOOKARWjyY/R8zgksXiADoXe+MeczMWilZkfUBNskbMVyhlGjSlgP7KbP+4Nezy8l4ZCq86ZHqDCI",
	"QyxXEaDe/5BAb6O3RbI0aBRrpmQLdMNLiNE7nAmIkT2GvpRR7VEcaYC95UoLOztW66sbuvU5KBLC0lN9",
	"VWupuY5QdIJzyE6waMjM46LgbO2Elfv5FijRP95hkpnGJAEhyDyD9j+c3LjEXGjQ6w1N9I+LNfAMFwWh",
	"y2vIIJGMq739K86Iar4tUmxVkTJn3OfzMpOkyODinoKGf6sF/VtIWJ4TIQjTSmoYvU8pZ1mmTLor+KUE",
	"Ib1FnigJt1CCAa7JUg26B0xFoV6IinRXUDBBJOObIN0UuXobOsT1GytCv8sAZA+1dZujrSGlR3jzwSe/",
	"+TJ0EwwrLsjS2VnOMB1mrf1AZKC7sva29fqpnAOnIEFcQ8JB7tX5jGaEwiNm/VHKItRN06Ao3cacM6r2",
	"ej8DPdTZDMwZPf1ccNAkD+h/ziiCCgAZNaI1gBo7LTOl9JQeFeMZVWrKQhCBPn2D7H+fpmiEzgktJYgp",
	"+vTNJ5RjmaxAoIPRt9+N0Qj9yEreaTp6qZre4o0SNeeMylUT4nD08lBBBJsOj7zOfwO4a4/+ejyj12VR",
	"MK68LWWPYMXSCtVPCuNzC4npxvpbz2G8HMd6GELRSqFcjQdr4Bv97YWa99Po0xRdYbqsex2M3nzShDs8",
	"Qsfnyi55g47PDXT8aYreEyEr4MP48MhCC6l9nMMjuUK5pqHpM/k0RdcSihqtietjkGn3uDZ+RXMtb2qS",
	"KHX1xusyo6efsTKxFeXQwehNfPh6dPTSbmlQw5tT3GUj8x1xUIykOBNhVKw2giQ48wztplmIC/JX4GG+",
	"PL48s20ohQWhFv21+QYpMpxfGaDVzNafWiBMkVHqY3St7C8ukFixMkuVUlsDl4hDwpaU/FqNpo1JqQ1R",
	"CUIiZTtxijND0lhvU443iIMaF5XUG0GDiDE6Z1zZiws2RSspCzGdTJZEju/eiDFh6ujmJSVyM1HmNifz",
	"UrHkJIU1ZBNBliPMkxWRkMiSwwQXZKSRpdq+H+fpn7g96CK4PXeEpl1a/kRoqs4rRgbSckhFMn3CV4Cu",
	"Tq9vkJvAkNVQ0NvXmpiKEIQugBtIbZarUYCmBSPUWq0Z0c5COc+JVLukNZui8xidYEqZ9v9LpU8gHaMz",
	"38j42qRU1BMjRbIwMZ05vsswvdA0OgeJtQ1s5fa2HrXSHG412z7WZG5Zv95JskzgoR8ycs1oHY+7GxUL",
	"B3VablJPfCdIVdVp0xMm0uEca3YqX1Sx2f2KJCuEOejpFMsNnEbHjALm+4dqFgeDnIdWOT7h0T1Xatie",
	"hWND7c3TJHaE8TCvZhm0gU3vP+TkCQPgNmqlAxFaUm4NjjT5QR3HnfyggJSRYKS38pediNFepB/4ehKP",
	"cntoqE3vnVQ1RlofIU+8AEjtBhp6KcZdkGWXbBxoChzSXn3nlF1zONfNG7cb6fTX1p5n6yIFy3pVuW32",
	"Nbr1dvXnhFEKiXUMq83urnt5dXlyahVC+NAriFpneJGH1jxh9jBW69nb8Ni2GZ293W/gFlEbi/An7aeu",
	"7+d0cTu3otkGkbDb7rTpHTl12SWrxHwJcpjK8FG50f3CARQz5LAleeN0wyMFJGRBrMGWglAzdJaWg1yx",
	"tMnufljhloL2vHUIQbmimysQDfy2ee3bMPZG3gbWnLWiwpnSAZzIze7okN1U4np0t9FK5GH72JrZyrmu",
	"dLPf+zeyZ6DuSqy+aAq6ajndvftCTWEOQ6Ul6omeREdsW/vj1MSWsXbEDLfQsLr3wUI0A2j1RcktFc6t",
	"3es8tBCupgi2VvMGW2tkepo9DCuCvScLSDZJBo9SrZnr/aSs1h7czv3FjNZa6+M4LDRIH2tJG7Hto1gt",
	"WN3OmdCm3eNmWK75ZU82a2HdZpVWcwOLQHsItR1gDaa7EC6SFjJzTCsyTXOrs4wqRBfXldXQK+Py4C3S",
	"TWMQDWR9JI5ur97vtjjMuP2McSEedYQurgcvoWWPumUEz4VueUuWIHpsvFS3tccyISokVvjo29dTfDAe",
	"j18MJU1z0n5CVdHuvchVBVl26bikKIeJgyYeRhrEUUrE3Zf0zyFnQ82H0Agt0qrVVINa7IaStucaSR2E",
	"TWEIWUWWDLFNCKt79f43zO1BP+FEkgRnj76EDyHq3/F3W+vJQ60eQqFmh2Sozb9788I/PWKpJZTwlhBq",
	"7fl2B9MR55aDr8YgEvK9ghc2UmVJjjnHG/Vv45X2z2vaUWGvO4bPHbxd6Uzf8in2d4f07fxAhW71iAkt",
	"GekQCLIo1Bq8npsLGUuKku+5Ca17nRAVxEZIyNMeD9g0IgFcLUIHuC1KXWbS9wSXWErgNBhByuy+akBU",
	"WMjGYjpBJ3Mn4fAoKZFaFcYmm4tx/X9ljYlysSCfY/UJI7GCLBsJuckALTM2d5Np/PXseIkJFdLlo2Qb",
	"lDGcgplC45Tjz++BLuUqmh59+zqO7BDRNPrfn/Ho1+PRPw5G301ns9E/x7PZbPbNx2/+HNJuTXqH0upM",
	"+PqSZSQZKIxvvR6GrR565Wyf6vJb/TBN2M4VXv6ZFSbI9s2xdrFIZkKfiSxxVqf3fKnssaaHH/OrTexB",
	"Z6AvVh04C7gbCNx79FYg1Yg5kwQhtuRPeXug6Whiyi6oqugYzJ7yyTtUNNpcrq0CefeSG1FOZcU5F+5R",
	"nrQaQbnt1wB0SHKXZQuTywQUzTeGTY2cGp7JVfk4j3LL9lQAVZ+GCtjX9tJCex/m7DCkkaZn1usdMEAN",
	"X4mrdB9JlfbcO3kno4FV8yRG4YPpk9Fnv4qN9d7U+NZU81jN54B+W/XxdyMer64wT+8xB30NbNIJCF1a",
	"1YYaF7NPf2dicXA5j08XEXuC+5K9snHD4a4LnVQTTry9gjljNt3okt0Dh/RisXikM9DA1Zu10+YhEmht",
	"mvqNJh/dQHNjBYH2gKPQOO1BI6CCsNf8oFUvScWkLEmqrb6Skl9KyDaIpEAlWWy2Orb+3XlYnB97EEr1",
	"mSybeXvYDm8q4oTua75nTKKzt/sMVZ1Bs/4wnhfVQb12B3XgBO07dp8k1Tq6WPSfk47Vt+PupNCQOgiV",
	"Y4qXJv1YywEjE3U1SZKVqWq5XwF1312myxxQyu6ptYyV3NKCGNLujju4a5P1tVOfmsVU0JVeeWz/hx1k",
	"Sx8V8TI4Pf3lRGP4pxTHjcU+Thx3h9gjZlwTrAoYFzfsLZaK5y9KebGwv70c0MfI4QaS3hSBVn/WYOdW",
	"Mmqz1RenRNw9fZZl3HOIrbOjT6+B1+eXiDtUChtKbTJlgZWvGg6gcp2Pu1F+8Mpz4vXwzTG3SzE9R5d3",
	"NHlKvzphgctMWd8HygTrYpTjzyQvc5TaTghnGbv3U2hMdoBkKLFlPKbCrepQiyhhpV6KsM4bZOosre01",
	"Gag12rHnG+VGKRdCOfljVGd3Vh8Fwhym6JMwiZIClIkqYvQpNx9M7qP6sDIfdJan3os6PPD8L9OfD0ff",
	"fZzN0m9e/GU2S38W+epjMDrQyQ/vbmAHpJkmaS/5NTJYJ47jTJHN3FJv9b//mz753/TJP2D6ZOdA7ZdJ",
	"2e3+iKRKi2lIC/eUjOBsgGhwoHU1XtgIqQSFF0KyEkOXH/dmDmFXmtLB5czUuIFQlqRcAbdXYUY6rbBA",
	"cwCK3ADens8ZywBTEwKaQ/YlNdTHznkxI+nqvqLINk60dKx1r965uXl2nXvtUG1jDjMI+re6axbsmHTX",
	"jnsB3C/d++Oea1qtRLG0Kbf+7t8rxext/LDYnOvx/WZQWbiC5QP8sHrU2F9SwKiJ99yCR0TRA4SvNmgc",
	"5LWw5xcEM1rHAzQzd2CfCZduoOPKgXtqwcNbcHl6PgKaMOUeXv50cv2nwwOU1AVpSJiKNJ+nAge4eU0x",
	"PIv9a8gLVy9rI8nontjybytCiKhiz8phVmrV20IiQgKuR8Yoqg4SL32uaw/gfnzYGaTv4BsF9Chx5t2F",
	"1Myxm6MU90DqM1SQgbber3TLzSG85C+9PekPbQf3WAcAO+USvYXlGt7Vk+8WclWB8kMcvSNZlSzQOtaM",
	"SuhLrC4yTCiS8Fmi57c370ZvXiDGddH461fVDtkRHGEXJOvdIgV3qrrZq/ZW6ITdu/xqaRwbrmSjnmWM",
	"zu1DH0C0YTGLNHKzSGE0iwxOs2iM3hq3U6v9CsgPRuhPUWy7dCMOD3G05KwswiRRy3smkIaIPbfToqW9",
	"T5enRcscOEnQ2ds2WpwxabDq2rwsha1TF8Bt7gFSsGP0d1ZqV8AgYyKSuTLcFzgnGcEcsUTirH77BOtg",
	"36/AmSvxO3j96pXeW2y0RUJy28Ekl4f6vDo6eKF8EVmSdCJALtX/JEnuNmhunWhUpXCO0dkCKV+jolhs",
	"4pPNxWgPVq1TSdiaYAq9cBFNf7wDzwXLSglVuMMxZ6s8BX1gEozMx3SD4DMR2h3ToFryzwEps+KeEykh",
	"HJ4rBfCtm8buKfCvwC+h0Ex11IJSJ1zu3JELSyKvlAwMrYnDAjhQ5aEyhNEPRDZzU7TihFB2CCupvKy2",
	"zMWHJp3wkIJxZVpmn54JsyP2qqxlYrridnU8VNc6MKSnbGjietf6mcfnGZuBZLGpC+l7asZc8257tR6q",
	"cvmDYxq77ArWRPQ+/MFtq76mEVDHArbi26n8qZDvzBr3hf3igY82tRK5dmNja9osI4Ym7qmG7/DySspi",
	"IDNT9OPNzeVAdlYMeRnkoZ38K5nHv06DcpAlp/W1kkZFwBq4x9DbxNA+3Me73OeYB5tIn9jQBG3hS5Nt",
	"FVo8r6yB26v3RrYmLAeB8ELaoIDSvjqRGZ1JlGBqb6EA/VKCjlFznIN+vEuUyQphMUWzaKJ4cCLZxEW4",
	"/qKh/7+GHiIfGxxebd/vz9SOI0Mz974e1uHrnrzrK5+jHX/pUlibNB0oUUUFTu4GmZX9eeW9r1p0ETeX",
	"5lvSA40NIBlKOGirvV1SOshUr8zeQJ7T191gu8IQmba+HDJ93It4u9GMI6FnG6rUayyR6bhTmz9ef5sJ",
	"BirtYQSpcQ4OIAqcbBlFN+8cKrzz9fCxR6GPuwIBtne9SSHWOdd59V/nlRcvht6hS92GiEAugG2N5ixT",
	"VrwgQkLqlT3ohxlXeA2x3Wkr4IXuYdYklLrhFtac9EDkgVIm6xTRRwZ5amDz8FknV7BDbI2PffhLSJwX",
	"WyKeJltTX9TcY2GXskeYM4UMHjOXdU90933mW255R+4YCfil1JLAvqbQuKbCzolJkPfGXJUBYEp1TQwR",
	"XbKizLCXKGNO/xhdAU5HjGabgc/OfXGM7xwXCkd7+3YHG1G/kWojfsoImYPiyFSJQMaXmJJfTapegiUs",
	"GVf/fC4SVpivQj9x9cIxc5CLhokre00azFBSnmNol7xrQiyVgyncPaz5HisBPNO3ThM11yyy7y71PXah",
	"e/VfB1PECvxLCY6IelqbCebSjYyl/Ex497Z1EVh9HTzotdXoyj5E8O94cvaYNqwjBfS7vhHbtuiClGjV",
	"HFYvPVjeXIyc4ZdWZ9a/mw+/UNKl/7Zaoy7MFyGF3j6qUEDnhgcKldQ5TqHI2GaPapkw0+1RunRTGWTO",
	"gXQ3kPpIni0pkfU7aX2xUveyxqAsfA3cKmf6/WqZ9nuXpOIIl49cQLJVJP23SOo/u0jq31futO+zNW6X",
	"jzPg8spmmLZyWH26dsm8KnNMR1V6Z+teVTvVauzwJWfZZ3K5tDllXUtn57E1cM9JwmvgynkvzWvC3otT",
	"c1gwbicmdDlG77RgmW7PgnsmnjXT257lz5rpbc9Wz3rT22az9P/1Z7QVwBOgsrewvW5XVDMrMreunCyX",
	"yiMIUdJYo8aVXcOQMqPGfl/bTuGMWDeit02NdTRV8k7makzWzZ21rR2ecXdUwQJmnb4/LEG2F5d64F4Q",
	"b8ZeGIOKt2gnN9VSiVpqTii2H3LzIKz6eXJ523utGn6+1KTc9sqGnnRc5yr39et3pB8qYb35oC3DyIpx",
	"VzA/zLzrWc2u91234bVDSvZQ4iGwS1sLB8I5x7hxRdGyzZw03aaoNRDiCmqMLmi2Me/C668FcOQOoE6f",
	"MFJqb+Vdi/WA+va3sfeRgYZJ0VTh3XgazouM0OWZcnWCqXmVWHd/nMIZKbqrIsTvIKmrLOQ+cd1OG/Do",
	"FPt7G1hxSAzekBz+wVx0113xvWdGorTIrvTcr4oRKj+SC7t2LRjPjj8cu9eCj69OjyfvL06Ob84uPsTo",
	"fgUc9MdmLrRyLwjVCQkcsQQwNVnDrmd1B6vzxDGXJCkzzJEgErSNROyL+ZgDjs1TueaJW3Ssr2fx5APc",
	"//PvjN/F6LRUJ2FyiTlxbF1SnM/JsmSlQC9H1R8hMTpdrbV1M46ez6Ifzm9mUYxm0e3NySx6EWS3205p",
	"TLuMq87Rts8um0g/LiXLsSRJVcejDzRNQxVAUgnupS1PNHEWjTkrQzlBO5+Paz0dbfJrufyB4wT8WoGt",
	"ks3BqUPtMde2PhUTdjL/QpfiD7p02VTzaO800QuDHJMsmkYScP4/i4wsVzKR2ZiwyIV1tNx4p1vQCaOS",
	"swzdAM6jOCq56uqSphu9O8Gpn5tDfHwe6vbC1eWZnDRdtAFJhhVx1mCquyC3iTiLDEDq5C5Ily4Eb0Je",
	"cgWEo3vG7xQriPHMFMAmQAXU8ZDouMDJCtDR+KCzmPv7+zHWzWPGlxPbV0zen52cfrg+HR2ND8YrmWdm",
	"w6Ri1qhFpOPLsyiO1s5jjNaHOCtW+NCW5FFckGgavRwfjA/tzbNmuAkuyGR9OLHrmfymkH2YONNf5y1A",
	"IJfpB5AN1zNuRyI8V7SpAl1EoqH+bLkeo2epGTwQKVFYuytMbS1sDwC2ZlG6Z9lCuhdJrSfVoDb7w+5g",
	"9Sas437JS4jtn7QKhEy76cZVyb2uf0ItD6uaVt/B1vNq4KuWN7Zt3o/a1S+YYiLVfnRw0MpM82I6k3/Z",
	"vz9SjzcknOM/l/zQOYAXPynGOzp4FXjql7nreQXy6uDwyVAz6X8BbG4pLuVKR5tTM+mrrz/pBybfsZLa",
	"Cb/7+hO6v89EFxlxf2wML7X3Yhg9+qi+9Rz5ukyjKAMH/tYWVbbyXHee5SsoMqWa/BTjLz/JdUHkUxzT",
	"jwYYhPyemWewn2Sj7LP8D02NqZB5+Irn0581dCZfPeFcvaz4PU6RK737gxzyHaetTmd39WL6qLFQbeKJ",
	"ydDAFIWqFPtOmunVLX38OszdnWcQnx9+bQRClEz/YHz/8utP+o7xOUlToP827RZH3/4eC7023sEtxWtM",
	"Mjx3ryLYo9451rtOvVW3Ww3rPQ/+FeA0dOz3UrL9E1rL+UmV7VfSfYNkglODf5Cj+Ttbuv+xh1Jfcugq",
	"b30ajAM+0fWItl8nR8udMv33N1pWqA4K2jNg9X3X3WuO0H/E/MG6yD98fPi/AAAA//+glKkXRnkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
